import { AgconnectStorageError } from '../implementation/error';
import { AGCNetworkService } from '@agconnect/network-types';
import CancelToken = AGCNetworkService.CancelToken;
import CancelTokenSource = AGCNetworkService.CancelTokenSource;
export interface UrlParams {
    [name: string]: string | number;
}
export declare class UploadFileInfo {
    uri: string;
    filename?: string;
    name?: string;
    type?: string;
    constructor(uri: string);
}
export declare class UploadRequestInfo {
    url: string;
    files: UploadFileInfo[];
    header: any;
    method?: string | undefined;
    data?: any;
    validateStatus?: ((status: number) => boolean);
    constructor(url: string, files: UploadFileInfo[], header: any, method?: string | undefined);
}
export declare class RequestConfig {
    timeout: number;
    responseType?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';
    onDownloadProgress?: (progressEvent: any) => void;
    onUploadProgress?: (progressEvent: any) => void;
    cancelToken?: CancelToken;
    validateStatus?: ((status: number) => boolean);
    constructor(timeout: number);
}
export declare class RequestInfo<T> {
    url: string;
    method: string;
    headers: {};
    handler: (status: number, res: any) => T;
    errorHandler: ((status: number, error: any) => AgconnectStorageError) | null;
    timeout: number;
    maxRetryTimes: number;
    area: string;
    urlParams: UrlParams;
    body: Blob | string | Uint8Array | null;
    successCodes: number[];
    progressCallback?: (progressEvent: any) => void;
    uri: string;
    source?: CancelTokenSource;
    constructor(url: string, method: string, headers: {}, handler: (status: number, res: any) => T, errorHandler: ((status: number, error: any) => AgconnectStorageError) | null, timeout: number, maxRetryTimes: number, area: string);
}
export declare function addProductIdHeader_(headers: Headers, productId: string): void;
export declare function addClientidHeader_(headers: Headers, clientId: string): void;
export declare function addAppidHeader_(headers: Headers, appId: string): void;
export interface Headers {
    [name: string]: string | number;
}
