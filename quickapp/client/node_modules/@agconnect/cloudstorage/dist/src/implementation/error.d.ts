export declare class AgconnectStorageError implements Error {
    private code_;
    private message_;
    private serverResponse_;
    private name_;
    constructor(code: Code, message: string);
    codeProp(): string;
    codeEquals(code: Code): boolean;
    serverResponseProp(): string | null;
    setServerResponseProp(serverResponse: string | null): void;
    get name(): string;
    get code(): string;
    get message(): string;
    get serverResponse(): null | string;
}
export declare const errors: {};
export declare function prependCode(code: Code): string;
export declare function unknown(): AgconnectStorageError;
export declare function objectNotFound(): AgconnectStorageError;
export declare function quotaExceeded(): AgconnectStorageError;
export declare function unauthenticated(): AgconnectStorageError;
export declare function noPermission(): AgconnectStorageError;
export declare function retryLimitExceeded(): AgconnectStorageError;
export declare function canceled(): AgconnectStorageError;
export declare function noAGCInstance(): AgconnectStorageError;
export declare function invalidConfig(): AgconnectStorageError;
export declare function invalidUrl(): AgconnectStorageError;
export declare function invalidDefaultBucket(): AgconnectStorageError;
export declare function noDefaultBucket(): AgconnectStorageError;
export declare function cannotSliceBlob(): AgconnectStorageError;
export declare function serverFileWrongSize(): AgconnectStorageError;
export declare function noDownloadURL(): AgconnectStorageError;
export declare function appDeleted(): AgconnectStorageError;
/**
 * @param name The name of the operation that was invalid.
 */
export declare function invalidRootOperation(name: string): AgconnectStorageError;
/**
 * @param name The name of the operation that was invalid.
 * @param func function name
 * @return {AgconnectStorageError}
 */
export declare function invalidOperation(name: string, func: string): AgconnectStorageError;
/**
 * @param format The format that was not valid.
 * @param message A message describing the format violation.
 */
export declare function invalidFormat(format: string, message: string): AgconnectStorageError;
/**
 * @param message A message describing the internal error.
 */
export declare function internalError(message: string): AgconnectStorageError;
/**
 * @param minArgs Describe the minimum number of parameters.
 * @param maxArgs Describe the maximum number of parameters.
 * @param name Description parameter name.
 * @param length Describe the actual number of parameters.
 */
export declare function invalidArgumentCount(minArgs: number, maxArgs: number, name: string, length: number): AgconnectStorageError;
/**
 * @param index Description parameter serial number.
 * @param name Description parameter name.
 * @param message A message describing the format violation.
 */
export declare function invalidArgument(index: number, name: string, message: string): AgconnectStorageError;
export declare function invalidAddress(): AgconnectStorageError;
/**
 * @enum {string}
 */
export declare type Code = string;
export declare const Code: {
    UNKNOWN: string;
    OBJECT_NOT_FOUND: string;
    QUOTA_EXCEEDED: string;
    UNAUTHENTICATED: string;
    NO_PERMISSION: string;
    RETRY_LIMIT_EXCEEDED: string;
    INVALID_CHECKSUM: string;
    CANCELED: string;
    NO_AGCCONNECT_INSTANCE: string;
    INCALID_CONFIG: string;
    INVALID_URL: string;
    INVALID_DEFAULT_BUCKET: string;
    NO_DEFAULT_BUCKET: string;
    CANNOT_SLICE_BLOB: string;
    SERVER_FILE_WRONG_SIZE: string;
    NO_DOWNLOAD_URL: string;
    INVALID_ARGUMENT: string;
    INVALID_ARGUMENT_COUNT: string;
    APP_DELETED: string;
    INVALID_ROOT_OPERATION: string;
    INVALID_OPERATION: string;
    INVALID_FORMAT: string;
    INTERNAL_ERROR: string;
};
