import { ListOptions, ListResult } from './list';
import { Location } from './implementation/location';
import { StringFormat } from './upload/string';
import { Metadata } from './metadata';
import { UploadTask } from './task';
import { StorageManagement } from './storagemanagement';
export declare class StorageReference {
    protected storageManagement: StorageManagement;
    protected location: Location;
    private _area;
    constructor(storageManagement: StorageManagement, area: string, location: string | Location);
    get parent(): StorageReference | null;
    get root(): StorageReference;
    get bucket(): string;
    get path(): string;
    get name(): string;
    get storage(): StorageManagement;
    protected newRef(service: StorageManagement, area: string, location: Location): StorageReference;
    child(childPath: string): StorageReference;
    delete(): Promise<any>;
    getDownloadURL(): Promise<any>;
    getFileMetadata(): Promise<Metadata>;
    listAll(): Promise<ListResult>;
    private listAllHelper;
    list(options?: ListOptions | null): Promise<ListResult>;
    put(data: Blob | Uint8Array | ArrayBuffer, metadata?: Metadata | null): UploadTask;
    put4QuickApp(uri: string, metadata?: Metadata | null): Promise<Metadata>;
    putString(value: string, format?: StringFormat, metadata?: Metadata): UploadTask;
    toString(): String;
    updateFileMetadata(attribute: Metadata): Promise<any>;
    private throwIfRoot_;
    private throwIfDirectory_;
}
