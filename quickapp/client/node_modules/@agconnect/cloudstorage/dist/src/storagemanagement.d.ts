import { Location } from './implementation/location';
import { StorageReference } from './storagereference';
import { Headers } from "./request/requestinfo";
import { RequestInfo } from "./request/requestinfo";
import { AddressCount } from "./utils/config";
import '@agconnect/instance';
import '@agconnect/auth';
import { AGCInstance, AGConnectOptions } from '@agconnect/instance-types';
export declare class StorageManagement {
    readonly _agcInstance: AGCInstance;
    private _bucket;
    private readonly _config;
    private _maxRequestTimeout;
    private _maxUploadTimeout;
    private _maxRetryTimes;
    constructor(agcInstance: AGCInstance, bucket?: string);
    storageReference(): StorageReference;
    storageReference(path: string): StorageReference;
    storageReference(policy: AGConnectOptions): StorageReference;
    storageReference(policy: AGConnectOptions, path: string): StorageReference;
    storageReferenceFromUrl(url: string): StorageReference;
    storageReferenceFromUrl(url: string, policy: AGConnectOptions): StorageReference;
    get maxUploadTimeout(): number;
    setMaxUploadTimeout(time: number): void;
    get maxRequestTimeout(): number;
    setMaxRequestTimeout(time: number): void;
    get maxRetryTimes(): number;
    setMaxRetryTimes(value: number): void;
    getAuthToken(): Promise<Headers>;
    makeStorageReference(location: Location, area: string): StorageReference;
    makeUploadRequest(requestInfo: RequestInfo<any>, authToken: Headers): Promise<any>;
    makeRequest(requestInfo: RequestInfo<any>, authToken: Headers, retryTimes?: number, lastUrl?: string): Promise<any>;
    doThen(requestInfo: RequestInfo<any>, res: any, authToken: Headers, retryTimes: number, addressCount: AddressCount): Promise<any>;
    doCatch(requestInfo: RequestInfo<any>, error: any, authToken: Headers, retryTimes: number, url: string, addressCount?: AddressCount): Promise<any>;
    private getAreaByPolicy;
}
