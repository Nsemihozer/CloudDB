import { StorageManagement } from './storagemanagement';
import { CSBlob } from './upload/file';
import { Metadata } from './metadata';
import { ObserverUtil } from '@agconnect/util';
import { UploadResult } from './taskresult';
import { Location } from './implementation/location';
import { StorageReference } from './storagereference';
import { TaskEvent } from './upload/taskenums';
/**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 */
export declare class UploadTask {
    private ref_;
    private service_;
    private location_;
    private blob_;
    private metadata_;
    private transferred_;
    private needToFetchStatus_;
    private needToFetchMetadata_;
    private observers_;
    private resumable_;
    private state_;
    private error_;
    private source_;
    private chunkMultiplier_;
    private errorHandler_;
    private metadataErrorHandler_;
    private resolve_;
    private reject_;
    private promise_;
    private area_;
    constructor(ref: StorageReference, storageManagement: StorageManagement, location: Location, blob: CSBlob, metadata: Metadata | null | undefined, area: string);
    private makeProgressCallback_;
    private shouldDoResumable_;
    private start_;
    private resolveToken_;
    private fetchStatus_;
    private continueUpload_;
    private increaseMultiplier_;
    private fetchMetadata_;
    private oneShotUpload_;
    private updateProgress_;
    private transition_;
    private completeTransitions_;
    get snapshot(): UploadResult;
    /**
     * Adds a callback for an event.
     * @param type The type of event to listen for.
     * @param nextOrObserver
     * @param error
     * @param completed
     */
    on(type: TaskEvent, nextOrObserver?: ObserverUtil.NextFn<UploadResult> | ObserverUtil.Observer<UploadResult> | null, error?: ObserverUtil.ErrorFn | null, completed?: ObserverUtil.CompleteFn | null): ObserverUtil.Unsubscribe | ObserverUtil.Subscribe<UploadResult>;
    then<U>(onFulfilled?: ((value: UploadResult) => U | Promise<U>) | null, onRejected?: ((error: Error) => U | Promise<U>) | null): Promise<U>;
    /**
     * Equivalent to calling `then(null, onRejected)`.
     */
    catch<T>(onRejected: (p1: Error) => T | Promise<T>): Promise<T>;
    /**
     * Adds the given observer.
     */
    private addObserver_;
    /**
     * Removes the given observer.
     */
    private removeObserver_;
    private notifyObservers_;
    private finishPromise_;
    private notifyObserver_;
    /**
     * Resumes a paused task. Has no effect on a currently running or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    resume(): boolean;
    /**
     * Pauses a currently running task. Has no effect on a paused or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    pause(): boolean;
    /**
     * Cancels a currently running or paused task. Has no effect on a complete or
     * failed task.
     * @return True if the operation took effect, false if ignored.
     */
    cancel(): boolean;
}
export declare function async(f: Function): Function;
