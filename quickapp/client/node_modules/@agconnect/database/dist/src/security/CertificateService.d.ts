import '@agconnect/auth';
import '@agconnect/instance';
import { ContextType } from '../sync/utils/EntityTemplate';
import { AGConnectServicesConfig, AGCRoutePolicy } from '@agconnect/instance-types';
export declare type Context = {
    productId: string;
    appId: string;
    clientId: string;
    userId: string;
    appVersion: number;
    clientVersion: number;
};
export declare class CertificateService {
    private static agcConfig;
    private static agcInstance;
    private static credentialsProvider;
    private static readonly APP_VERSION;
    private websocketUrl;
    private websocketBackUrl;
    private httpUrl;
    private httpBackUrl;
    private context;
    private agcRoutePolicy;
    constructor(agcRoutePolicy?: AGCRoutePolicy);
    static loadAgcConfig(agconnectServiceConfig: AGConnectServicesConfig): void;
    static getUserInfo(): Promise<import("@agconnect/auth-types").AGConnectUser | null>;
    private static isValidContext;
    private static getAuthorization;
    getHeaderParam(isArrayBuffer?: boolean): Promise<Header>;
    private isValidAgcGwAllAddress;
    private createHeader;
    private escapeHeader;
    private loadAgcGwAddress;
    private loadAgcGwAllAddress;
    setAppVersion(version: number): void;
    getSubscribeOptions(): {
        url: string;
    };
    getSubscribeBackOptions(): {
        url: string;
    };
    getContext(): Context;
    getUrl(): string;
    getBackUrl(): string;
    getAGCRoutePolicy(): AGCRoutePolicy;
    private setContext;
}
interface Header {
    'Content-Type': ContextType;
    authorization: string;
    client_id: string;
    productId: string;
    access_token?: string;
    sdkPlatform: string;
    sdkVersion: string;
    appVersion: string;
}
export {};
