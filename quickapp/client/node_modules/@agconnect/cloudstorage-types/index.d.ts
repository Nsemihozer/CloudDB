export type StringFormat = string;
export type TaskEvent = string;
export type TaskState = string;
export type NextFn<T> = (value: T) => void;
export type ErrorFn = (error: Error) => void;
export type CompleteFn = () => void;
export type Unsubscribe = () => void;

export interface StorageReference {
    bucket: string;
    path: string;
    name: string;
    parent: StorageReference | null;
    root: StorageReference;
    storage: StorageManagement;

    child(path: string): StorageReference;

    delete(): Promise<void>;

    getDownloadURL(): Promise<string>;

    getFileMetadata(): Promise<FileMetadata>;

    list(options?: ListOptions): Promise<ListResult>;

    listAll(): Promise<ListResult>;

    put(data: File | Uint8Array | ArrayBuffer, attribute ?: UploadMetadata): UploadTask;

    putString(data: string, format ?: StringFormat, attribute ?: UploadMetadata): UploadTask;

    put4QuickApp(uri: String, attribute ?: UploadMetadata): Promise<FileMetadata>;

    toString(): string;

    updateFileMetadata(attribute: SetFileMetadata): Promise<FileMetadata>
}

export interface SetFileMetadata {
    cacheControl?: string;
    contentDisposition?: string;
    contentEncoding?: string;
    contentLanguage?: string;
    contentType?: string;
    customMetadata?: {
        [key: string]: string;
    };
}

export interface UploadMetadata extends SetFileMetadata {
    sha256Hash?: string;
}

export interface FileMetadata extends UploadMetadata {
    bucket: string;
    path: string;
    name: string;
    size: number;
    ctime: string;
    mtime: string;
}

export interface ListOptions {
    maxResults?: number;
    pageMarker?: string;
}

export interface ListResult {
    dirList: StorageReference[];
    fileList: StorageReference[];
    pageMarker?: string | null;
}

export interface UploadTask {
    uploadResult: UploadResult;

    cancel(): boolean;

    catch(onRejected: (a: Error) => any): Promise<any>;

    on(event: TaskEvent, nextOrObserver ?: Observer<UploadResult> | null | ((a: UploadResult) => any), error ?: ((a: Error) => any) | null, complete ?: Unsubscribe | null): Function
}

export interface UploadResult {
    bytesTransferred: number;
    metadata: FileMetadata;
    reference: StorageReference;
    state: TaskState;
    task: UploadTask;
    totalByteCount: number;
}

export interface StorageManagement {
    maxRequestTimeout: number;
    maxUploadTimeout: number;
    maxRetryTimes: number;

    storageReference(): StorageReference;

    storageReference(path: string): StorageReference;

    storageReference(policy: AGConnectOptions): StorageReference;

    storageReference(policy: AGConnectOptions, path: string): StorageReference;

    storageReferenceFromUrl(url: string): StorageReference;

    storageReferenceFromUrl(url: string, policy: AGConnectOptions): StorageReference;

    setMaxRequestTimeout(time: number): void;

    setMaxUploadTimeout(time: number): void;

    setMaxRetryTimes(count: number): void;
}

export interface Observer<T> {
    next: NextFn<T>;

    error: ErrorFn;

    complete: CompleteFn;
}

export interface AGConnectOptions {
    routePolicy: AGCRoutePolicy
}

export const enum AGCRoutePolicy {
    UNKNOWN,
    CHINA,
    GERMANY,
    RUSSIA,
    SINGAPORE
}
